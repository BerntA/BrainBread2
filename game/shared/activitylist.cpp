//========= Copyright Valve Corporation, All rights reserved. ============//
//
// Purpose: 
//
// $NoKeywords: $
//
//=============================================================================//
#include "cbase.h"
#include "ai_activity.h"
#include "activitylist.h"
#include "stringregistry.h"
#include "filesystem.h"
#include <KeyValues.h>
#include "utldict.h"

// memdbgon must be the last include file in a .cpp file!!!
#include "tier0/memdbgon.h"

extern IFileSystem *filesystem;

// NOTE: If CStringRegistry allowed storing arbitrary data, we could just use that.
// in this case we have the "isPrivate" member and the replacement rules 
// (activityIndex can be reused by private activities), so a custom table is necessary
struct activitylist_t
{
	int					activityIndex;
	unsigned short		stringKey;
	short				isPrivate;
};

CUtlVector<activitylist_t> g_ActivityList;

// This stores the actual activity names.  Also, the string ID in the registry is simply an index 
// into the g_ActivityList array.
CStringRegistry	g_ActivityStrings;

// this is just here to accelerate adds
static int g_HighestActivity = 0;

int g_nActivityListVersion = 1;


void ActivityList_Init( void )
{
	g_HighestActivity = 0;
}

void ActivityList_Free( void )
{
	g_ActivityStrings.ClearStrings();
	g_ActivityList.Purge();

	// So studiohdrs can reindex activity indices
	++g_nActivityListVersion;
}

// add a new activity to the database
activitylist_t *ActivityList_AddActivityEntry( const char *pName, int iActivityIndex, bool isPrivate )
{
	MEM_ALLOC_CREDIT();
	int index = g_ActivityList.AddToTail();
	activitylist_t *pList = &g_ActivityList[index];
	pList->activityIndex = iActivityIndex;
	pList->stringKey = g_ActivityStrings.AddString( pName, index );
	pList->isPrivate = isPrivate;
	
	// UNDONE: This implies that ALL shared activities are added before ANY custom activities
	// UNDONE: Segment these instead?  It's a 32-bit int, how many activities do we need?
	if ( iActivityIndex > g_HighestActivity )
	{
		g_HighestActivity = iActivityIndex;
	}

	return pList;
}

// get the database entry from a string
static activitylist_t *ListFromString( const char *pString )
{
	// just use the string registry to do this search/map
	int stringID = g_ActivityStrings.GetStringID( pString );
	if ( stringID < 0 )
		return NULL;

	return &g_ActivityList[stringID];
}

// Get the database entry for an index
static activitylist_t *ListFromActivity( int activityIndex )
{
	// ugly linear search
	for ( int i = 0; i < g_ActivityList.Size(); i++ )
	{
		if ( g_ActivityList[i].activityIndex == activityIndex )
		{
			return &g_ActivityList[i];
		}
	}

	return NULL;
}

bool ActivityList_RegisterSharedActivity( const char *pszActivityName, int iActivityIndex )
{
	// UNDONE: Do we want to do these checks when not in developer mode? or maybe DEBUG only?
	// They really only matter when you change the list of code controlled activities.  IDs
	// for content controlled activities never collide because they are generated.

	// technically order isn't dependent, but it's too damn easy to forget to add new ACT_'s to all three lists.
	static int lastActivityIndex = -1;
	Assert( iActivityIndex < LAST_SHARED_ACTIVITY && (iActivityIndex == lastActivityIndex + 1 || iActivityIndex == 0) );
	lastActivityIndex = iActivityIndex;

	// first, check to make sure the slot we're asking for is free. It must be for 
	// a shared activity.
	activitylist_t *pList = ListFromString( pszActivityName );
	if ( !pList )
	{
		pList = ListFromActivity( iActivityIndex );
	}

	if ( pList )
	{
		Warning( "***\nShared activity collision! %s<->%s\n***\n", pszActivityName, g_ActivityStrings.GetStringForKey( pList->stringKey ) );
		Assert(0);
		return false;
	}
	// ----------------------------------------------------------------

	ActivityList_AddActivityEntry( pszActivityName, iActivityIndex, false );
	return true;
}

Activity ActivityList_RegisterPrivateActivity( const char *pszActivityName )
{
	activitylist_t *pList = ListFromString( pszActivityName );
	if ( pList )
	{
		// this activity is already in the list. If the activity we collided with is also private, 
		// then the collision is OK. Otherwise, it's a bug.
		if ( pList->isPrivate )
		{
			return (Activity)pList->activityIndex;
		}
		else
		{
			// this private activity collides with a shared activity. That is not allowed.
			Warning( "***\nShared<->Private Activity collision!\n***\n" );
			Assert(0);
			return ACT_INVALID;
		}
	}

	pList = ActivityList_AddActivityEntry( pszActivityName, g_HighestActivity+1, true );
	return (Activity)pList->activityIndex;
}

// Get the index for a given activity name
// Done at load time for all models
int ActivityList_IndexForName( const char *pszActivityName )
{
	// this is a fast O(lgn) search (actually does 2 O(lgn) searches)
	activitylist_t *pList = ListFromString( pszActivityName );

	if ( pList )
	{
		return pList->activityIndex;
	}

	return kActivityLookup_Missing;
}

// Get the name for a given index
// This should only be used in debug code, it does a linear search
// But at least it only compares integers
const char *ActivityList_NameForIndex( int activityIndex )
{
	activitylist_t *pList = ListFromActivity( activityIndex );
	if ( pList )
	{
		return g_ActivityStrings.GetStringForKey( pList->stringKey );
	}
	return NULL;
}

void ActivityList_RegisterSharedActivities( void )
{
	REGISTER_SHARED_ACTIVITY(ACT_RESET);				// Set m_Activity to this invalid value to force a reset to m_IdealActivity
	REGISTER_SHARED_ACTIVITY(ACT_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_TRANSITION);
	REGISTER_SHARED_ACTIVITY(ACT_COVER);					// FIXME: obsolete? redundant with ACT_COVER_LOW?
	REGISTER_SHARED_ACTIVITY(ACT_COVER_LOW);				// FIXME: rename ACT_IDLE_CROUCH?
	REGISTER_SHARED_ACTIVITY(ACT_WALK);
	REGISTER_SHARED_ACTIVITY(ACT_WALK_AIM);
	REGISTER_SHARED_ACTIVITY(ACT_WALK_CROUCH);
	REGISTER_SHARED_ACTIVITY(ACT_WALK_CROUCH_AIM);
	REGISTER_SHARED_ACTIVITY(ACT_RUN);
	REGISTER_SHARED_ACTIVITY(ACT_RUN_AIM);
	REGISTER_SHARED_ACTIVITY(ACT_RUN_CROUCH);
	REGISTER_SHARED_ACTIVITY(ACT_RUN_CROUCH_AIM);
	REGISTER_SHARED_ACTIVITY(ACT_RUNTOIDLE);
	REGISTER_SHARED_ACTIVITY(ACT_SCRIPT_CUSTOM_MOVE);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK1);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK2);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK1_LOW);		// FIXME: not used yet, crouched versions of the range attack
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK2_LOW);		// FIXME: not used yet, crouched versions of the range attack
	REGISTER_SHARED_ACTIVITY(ACT_DIESIMPLE);
	REGISTER_SHARED_ACTIVITY(ACT_DIERAGDOLL);
	REGISTER_SHARED_ACTIVITY(ACT_FLY);				// Fly (and flap if appropriate)
	REGISTER_SHARED_ACTIVITY(ACT_HOVER);
	REGISTER_SHARED_ACTIVITY(ACT_GLIDE);
	REGISTER_SHARED_ACTIVITY(ACT_SWIM);
	REGISTER_SHARED_ACTIVITY(ACT_JUMP);
	REGISTER_SHARED_ACTIVITY(ACT_HOP);				// vertical jump
	REGISTER_SHARED_ACTIVITY(ACT_LEAP);				// long forward jump
	REGISTER_SHARED_ACTIVITY(ACT_LAND);
	REGISTER_SHARED_ACTIVITY(ACT_CLIMB_UP);
	REGISTER_SHARED_ACTIVITY(ACT_CLIMB_DOWN);
	REGISTER_SHARED_ACTIVITY(ACT_CLIMB_DISMOUNT);
	REGISTER_SHARED_ACTIVITY(ACT_SHIPLADDER_UP);
	REGISTER_SHARED_ACTIVITY(ACT_SHIPLADDER_DOWN);
	REGISTER_SHARED_ACTIVITY(ACT_STRAFE_LEFT);
	REGISTER_SHARED_ACTIVITY(ACT_STRAFE_RIGHT);
	REGISTER_SHARED_ACTIVITY(ACT_ROLL_LEFT);			// tuck and roll, left
	REGISTER_SHARED_ACTIVITY(ACT_ROLL_RIGHT);			// tuck and roll, right
	REGISTER_SHARED_ACTIVITY(ACT_TURN_LEFT);			// turn quickly left (stationary)
	REGISTER_SHARED_ACTIVITY(ACT_TURN_RIGHT);			// turn quickly right (stationary)
	REGISTER_SHARED_ACTIVITY(ACT_TURN);
	REGISTER_SHARED_ACTIVITY(ACT_CROUCH);				// FIXME: obsolete? only used be soldier (the act of crouching down from a standing position)
	REGISTER_SHARED_ACTIVITY(ACT_CROUCHIDLE);			// FIXME: obsolete? only used be soldier (holding body in crouched position (loops))
	REGISTER_SHARED_ACTIVITY(ACT_STAND);				// FIXME: obsolete? should be transition (the act of standing from a crouched position)
	REGISTER_SHARED_ACTIVITY(ACT_USE);

	REGISTER_SHARED_ACTIVITY(ACT_LOOKBACK_RIGHT);		// look back over shoulder without turning around.
	REGISTER_SHARED_ACTIVITY(ACT_LOOKBACK_LEFT);
	REGISTER_SHARED_ACTIVITY(ACT_COWER);				// FIXME: unused, should be more extreme version of crouching
	REGISTER_SHARED_ACTIVITY(ACT_SMALL_FLINCH);		// FIXME: needed? shouldn't flinching be down with overlays?
	REGISTER_SHARED_ACTIVITY(ACT_BIG_FLINCH);
	REGISTER_SHARED_ACTIVITY(ACT_MELEE_ATTACK1);
	REGISTER_SHARED_ACTIVITY(ACT_MELEE_ATTACK2);
	REGISTER_SHARED_ACTIVITY(ACT_RELOAD);
	REGISTER_SHARED_ACTIVITY(ACT_RELOAD_START);
	REGISTER_SHARED_ACTIVITY(ACT_RELOAD_FINISH);
	REGISTER_SHARED_ACTIVITY(ACT_RELOAD_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_ARM);				// pull out gun, for instance
	REGISTER_SHARED_ACTIVITY(ACT_DISARM);				// reholster gun
	REGISTER_SHARED_ACTIVITY(ACT_DROP_WEAPON);
	REGISTER_SHARED_ACTIVITY(ACT_PICKUP_GROUND);		// pick up something in front of you on the ground
	REGISTER_SHARED_ACTIVITY(ACT_PICKUP_RACK);		// pick up something from a rack or shelf in front of you.
	REGISTER_SHARED_ACTIVITY(ACT_IDLE_ANGRY);			// FIXME: being used as an combat ready idle?  alternate idle animation in which the monster is clearly agitated. (loop)

	REGISTER_SHARED_ACTIVITY(ACT_SPECIAL_ATTACK1);	// very monster specific special attacks.
	REGISTER_SHARED_ACTIVITY(ACT_SPECIAL_ATTACK2);
	REGISTER_SHARED_ACTIVITY(ACT_COMBAT_IDLE);		// FIXME: unused?  agitated idle.
	REGISTER_SHARED_ACTIVITY(ACT_WALK_SCARED);
	REGISTER_SHARED_ACTIVITY(ACT_RUN_SCARED);
	REGISTER_SHARED_ACTIVITY(ACT_VICTORY_DANCE);		// killed a player); do a victory dance.
	REGISTER_SHARED_ACTIVITY(ACT_FLINCH_HEAD);
	REGISTER_SHARED_ACTIVITY(ACT_FLINCH_CHEST);
	REGISTER_SHARED_ACTIVITY(ACT_FLINCH_STOMACH);
	REGISTER_SHARED_ACTIVITY(ACT_FLINCH_LEFTARM);
	REGISTER_SHARED_ACTIVITY(ACT_FLINCH_RIGHTARM);
	REGISTER_SHARED_ACTIVITY(ACT_FLINCH_LEFTLEG);
	REGISTER_SHARED_ACTIVITY(ACT_FLINCH_RIGHTLEG);
	REGISTER_SHARED_ACTIVITY(ACT_FLINCH_PHYSICS);

	REGISTER_SHARED_ACTIVITY(ACT_IDLE_ON_FIRE);		// ON FIRE animations
	REGISTER_SHARED_ACTIVITY(ACT_WALK_ON_FIRE);
	REGISTER_SHARED_ACTIVITY(ACT_RUN_ON_FIRE);

	REGISTER_SHARED_ACTIVITY(ACT_RAPPEL_LOOP);		// Rappel down a rope!

	REGISTER_SHARED_ACTIVITY(ACT_180_LEFT);			// 180 degree left turn
	REGISTER_SHARED_ACTIVITY(ACT_180_RIGHT);

	REGISTER_SHARED_ACTIVITY(ACT_90_LEFT);			// 90 degree turns
	REGISTER_SHARED_ACTIVITY(ACT_90_RIGHT);

	REGISTER_SHARED_ACTIVITY(ACT_STEP_LEFT);			// Single steps
	REGISTER_SHARED_ACTIVITY(ACT_STEP_RIGHT);
	REGISTER_SHARED_ACTIVITY(ACT_STEP_BACK);
	REGISTER_SHARED_ACTIVITY(ACT_STEP_FORE);

	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK1);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK2);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_MELEE_ATTACK1);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_MELEE_ATTACK2);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK1_LOW);	// FIXME: not used yet, crouched versions of the range attack
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK2_LOW);	// FIXME: not used yet, crouched versions of the range attack

	REGISTER_SHARED_ACTIVITY(ACT_MELEE_ATTACK_SWING_GESTURE);

	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_SMALL_FLINCH);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_BIG_FLINCH);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_FLINCH_BLAST);			// Startled by an explosion
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_FLINCH_BLAST_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_FLINCH_BLAST_DAMAGED);	// Damaged by an explosion
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_FLINCH_BLAST_DAMAGED_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_FLINCH_HEAD);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_FLINCH_CHEST);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_FLINCH_STOMACH);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_FLINCH_LEFTARM);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_FLINCH_RIGHTARM);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_FLINCH_LEFTLEG);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_FLINCH_RIGHTLEG);

	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_TURN_LEFT);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_TURN_RIGHT);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_TURN_LEFT45);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_TURN_RIGHT45);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_TURN_LEFT90);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_TURN_RIGHT90);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_TURN_LEFT45_FLAT);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_TURN_RIGHT45_FLAT);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_TURN_LEFT90_FLAT);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_TURN_RIGHT90_FLAT);

	// Sometimes); you just want to set an NPC's sequence to a sequence that doesn't actually
	// have an activity. The AI will reset the NPC's sequence to whatever its IDEAL activity
	// is); though. So if you set ideal activity to DO_NOT_DISTURB); the AI will not interfere
	// with the NPC's current sequence. (SJB)
	REGISTER_SHARED_ACTIVITY(ACT_DO_NOT_DISTURB);

	// Custom BB2 World Activities:
	REGISTER_SHARED_ACTIVITY(ACT_RISE);
	REGISTER_SHARED_ACTIVITY(ACT_RISE_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_TANK_PRIMARY_FIRE);
	REGISTER_SHARED_ACTIVITY(ACT_TANK_SECONDARY_FIRE);

	// viewmodel (weapon) activities
	// FIXME: move these to the specific viewmodels); no need to make global
	REGISTER_SHARED_ACTIVITY(ACT_VM_DRAW);
	REGISTER_SHARED_ACTIVITY(ACT_VM_DRAW_RARE);
	REGISTER_SHARED_ACTIVITY(ACT_VM_HOLSTER);
	REGISTER_SHARED_ACTIVITY(ACT_VM_HOLSTER_EMPTY);
	REGISTER_SHARED_ACTIVITY(ACT_VM_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_VM_FIDGET);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PULLBACK);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PULLBACK_HIGH);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PULLBACK_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_VM_THROW);
	REGISTER_SHARED_ACTIVITY(ACT_VM_THROW_RARE);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PULLPIN);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PRIMARYATTACK);		// fire
	REGISTER_SHARED_ACTIVITY(ACT_VM_SECONDARYATTACK);		// alt. fire
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_START);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_FINISH);
	REGISTER_SHARED_ACTIVITY(ACT_VM_DRYFIRE);				// fire with no ammo loaded.
	REGISTER_SHARED_ACTIVITY(ACT_VM_HITLEFT);				// bludgeon, swing to left - hit (primary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_HITLEFT2);			// bludgeon, swing to left - hit (secondary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_HITRIGHT);			// bludgeon, swing to right - hit (primary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_HITRIGHT2);			// bludgeon, swing to right - hit (secondary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_HITCENTER);			// bludgeon, swing center - hit (primary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_HITCENTER2);			// bludgeon, swing center - hit (secondary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_MISSLEFT);			// bludgeon, swing to left - miss (primary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_MISSLEFT2);			// bludgeon, swing to left - miss (secondary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_MISSRIGHT);			// bludgeon, swing to right - miss (primary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_MISSRIGHT2);			// bludgeon, swing to right - miss (secondary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_MISSCENTER);			// bludgeon, swing center - miss (primary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_MISSCENTER2);			// bludgeon, swing center - miss (secondary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_HAULBACK);			// bludgeon, haul the weapon back for a hard strike (secondary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_SWINGHARD);			// bludgeon, release the hard strike (secondary attk)
	REGISTER_SHARED_ACTIVITY(ACT_VM_SWINGMISS);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SWINGHIT);
	REGISTER_SHARED_ACTIVITY(ACT_VM_IDLE_TO_LOWERED);
	REGISTER_SHARED_ACTIVITY(ACT_VM_IDLE_LOWERED);
	REGISTER_SHARED_ACTIVITY(ACT_VM_LOWERED_TO_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RECOIL1);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RECOIL2);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RECOIL3);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PICKUP);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELEASE);
	REGISTER_SHARED_ACTIVITY(ACT_VM_IDLE_EMPTY);
	REGISTER_SHARED_ACTIVITY(ACT_VM_DRAW_EMPTY);

	REGISTER_SHARED_ACTIVITY(ACT_VM_ATTACH_SILENCER);
	REGISTER_SHARED_ACTIVITY(ACT_VM_DETACH_SILENCER);

	//===========================
	// BB2 Specific Activities
	//===========================
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD0);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD1);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD2);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD3);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD4);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD5);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD6);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD7);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD8);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD9);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD10);

	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_EMPTY0);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_EMPTY1);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_EMPTY2);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_EMPTY3);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_EMPTY4);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_EMPTY5);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_EMPTY6);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_EMPTY7);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_EMPTY8);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_EMPTY9);
	REGISTER_SHARED_ACTIVITY(ACT_VM_RELOAD_EMPTY10);

	REGISTER_SHARED_ACTIVITY(ACT_VM_PUMP0);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PUMP1);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PUMP2);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PUMP3);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PUMP4);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PUMP5);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PUMP6);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PUMP7);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PUMP8);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PUMP9);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PUMP10);

	REGISTER_SHARED_ACTIVITY(ACT_VM_MELEE);
	REGISTER_SHARED_ACTIVITY(ACT_VM_MELEE_EMPTY);

	REGISTER_SHARED_ACTIVITY(ACT_VM_PRIMARYATTACK0);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PRIMARYATTACK1);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PRIMARYATTACK2);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PRIMARYATTACK3);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PRIMARYATTACK4);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PRIMARYATTACK5);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PRIMARYATTACK6);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PRIMARYATTACK7);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PRIMARYATTACK8);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PRIMARYATTACK9);
	REGISTER_SHARED_ACTIVITY(ACT_VM_PRIMARYATTACK10);

	REGISTER_SHARED_ACTIVITY(ACT_VM_SPECIALATTACK0);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SPECIALATTACK1);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SPECIALATTACK2);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SPECIALATTACK3);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SPECIALATTACK4);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SPECIALATTACK5);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SPECIALATTACK6);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SPECIALATTACK7);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SPECIALATTACK8);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SPECIALATTACK9);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SPECIALATTACK10);

	REGISTER_SHARED_ACTIVITY(ACT_VM_IDLE_TO_SPIN);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SPIN_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SPIN_TO_IDLE);

	REGISTER_SHARED_ACTIVITY(ACT_VM_LASTBULLET);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SHOOT_LEFT_LAST);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SHOOT_RIGHT_LAST);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SHOOT_LEFT);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SHOOT_RIGHT);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SHOOT_BOTH);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SHOOT_LEFT_DRYFIRE);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SHOOT_RIGHT_DRYFIRE);
	REGISTER_SHARED_ACTIVITY(ACT_VM_SHOOT_BOTH_DRYFIRE);

	REGISTER_SHARED_ACTIVITY(ACT_VM_CHARGE_START);
	REGISTER_SHARED_ACTIVITY(ACT_VM_CHARGE_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_VM_CHARGE_ATTACK);

	//===========================
	// HL2 Specific Activities
	//===========================
	// Shotgun Specialty Activities
	REGISTER_SHARED_ACTIVITY(ACT_SHOTGUN_RELOAD_START);
	REGISTER_SHARED_ACTIVITY(ACT_SHOTGUN_RELOAD_START_EMPTY);
	REGISTER_SHARED_ACTIVITY(ACT_SHOTGUN_RELOAD_FINISH);
	REGISTER_SHARED_ACTIVITY(ACT_SHOTGUN_RELOAD_FINISH_EMPTY);
	REGISTER_SHARED_ACTIVITY(ACT_SHOTGUN_PUMP);

	// weapon override activities
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_AR1);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_AR2);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_AR2_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_AR2_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_HMG1);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_ML);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_SMG1);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_SMG1_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_SHOTGUN_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_PISTOL_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_SLAM);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_TRIPWIRE);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_THROW);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_SNIPER_RIFLE);
	REGISTER_SHARED_ACTIVITY(ACT_MELEE_ATTACK_SWING);

	REGISTER_SHARED_ACTIVITY(ACT_RANGE_AIM_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_AIM_SMG1_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_AIM_PISTOL_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_AIM_AR2_LOW);

	REGISTER_SHARED_ACTIVITY(ACT_COVER_PISTOL_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_COVER_SMG1_LOW);

	// weapon override activities
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_AR1);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_AR2);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_AR2_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_HMG1);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_ML);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_SMG1);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_SMG1_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_PISTOL_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_SLAM);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_TRIPWIRE);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_THROW);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_SNIPER_RIFLE);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_MELEE_ATTACK_SWING);

	REGISTER_SHARED_ACTIVITY(ACT_IDLE_RIFLE);
	REGISTER_SHARED_ACTIVITY(ACT_IDLE_SMG1);
	REGISTER_SHARED_ACTIVITY(ACT_IDLE_ANGRY_SMG1);
	REGISTER_SHARED_ACTIVITY(ACT_IDLE_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_IDLE_ANGRY_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_IDLE_ANGRY_SHOTGUN);

	// Manned guns
	REGISTER_SHARED_ACTIVITY(ACT_IDLE_MANNEDGUN);

	// Melee weapon
	REGISTER_SHARED_ACTIVITY(ACT_IDLE_MELEE);
	REGISTER_SHARED_ACTIVITY(ACT_IDLE_ANGRY_MELEE);

	REGISTER_SHARED_ACTIVITY(ACT_WALK_RIFLE);
	REGISTER_SHARED_ACTIVITY(ACT_WALK_AIM_RIFLE);
	REGISTER_SHARED_ACTIVITY(ACT_WALK_CROUCH_RIFLE);
	REGISTER_SHARED_ACTIVITY(ACT_WALK_CROUCH_AIM_RIFLE);
	REGISTER_SHARED_ACTIVITY(ACT_RUN_RIFLE);
	REGISTER_SHARED_ACTIVITY(ACT_RUN_AIM_RIFLE);
	REGISTER_SHARED_ACTIVITY(ACT_RUN_CROUCH_RIFLE);
	REGISTER_SHARED_ACTIVITY(ACT_RUN_CROUCH_AIM_RIFLE);

	REGISTER_SHARED_ACTIVITY(ACT_WALK_AIM_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_RUN_AIM_SHOTGUN);

	REGISTER_SHARED_ACTIVITY(ACT_WALK_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_RUN_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_WALK_AIM_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_RUN_AIM_PISTOL);

	// Reloads
	REGISTER_SHARED_ACTIVITY(ACT_RELOAD_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_RELOAD_PISTOL_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_RELOAD_SMG1);
	REGISTER_SHARED_ACTIVITY(ACT_RELOAD_SMG1_LOW);
	REGISTER_SHARED_ACTIVITY(ACT_RELOAD_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_RELOAD_SHOTGUN_LOW);

	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RELOAD);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RELOAD_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RELOAD_SMG1);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RELOAD_SHOTGUN);

	// Dodge animations
	REGISTER_SHARED_ACTIVITY(ACT_DUCK_DODGE);

	REGISTER_SHARED_ACTIVITY(ACT_PHYSCANNON_DETACH);	// An activity to be played if we're picking this up with the physcannon
	REGISTER_SHARED_ACTIVITY(ACT_PHYSCANNON_ANIMATE); // An activity to be played by an object being picked up with the physcannon); but has different behavior to DETACH
	REGISTER_SHARED_ACTIVITY(ACT_PHYSCANNON_ANIMATE_PRE);	// An activity to be played by an object being picked up with the physcannon); before playing the ACT_PHYSCANNON_ANIMATE
	REGISTER_SHARED_ACTIVITY(ACT_PHYSCANNON_ANIMATE_POST);// An activity to be played by an object being picked up with the physcannon); after playing the ACT_PHYSCANNON_ANIMATE

	REGISTER_SHARED_ACTIVITY(ACT_OPEN_DOOR);

	// HL2MP
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_KICK);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_IDLE_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_PISTOL);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_BASH_PISTOL);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_SMG1);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_SMG1);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_SMG1);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_SMG1);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_SMG1);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_SMG1);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_SMG1);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_AR2);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_AR2);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_AR2);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_AR2);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_AR2);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_AR2);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_AR2);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_AR2);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_BASH_AR2);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_IDLE_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_BASH_SHOTGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_SHOTGUN_INSERT);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_IDLE_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_GRENADE);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROSSBOW);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_CROSSBOW);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_CROSSBOW);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_CROSSBOW);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_CROSSBOW);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_CROSSBOW);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_CROSSBOW);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_MELEE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_MELEE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_MELEE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_MELEE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_MELEE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_MELEE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_MELEE);

	// BrainBread 2:
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_RIFLE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_IDLE_RIFLE);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_IDLE_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_MINIGUN);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_MELEE_1HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_MELEE_1HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_MELEE_1HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_IDLE_MELEE_1HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_MELEE_1HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_MELEE_1HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE_1HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_MELEE_1HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_MELEE_1HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_MELEE_1HANDED);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_MELEE_2HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_MELEE_2HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_MELEE_2HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_IDLE_MELEE_2HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_MELEE_2HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_MELEE_2HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_MELEE_2HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_MELEE_2HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_MELEE_2HANDED);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_MELEE_2HANDED);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_PROPANE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_PROPANE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_PROPANE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_IDLE_PROPANE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_PROPANE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_PROPANE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_PROPANE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_PROPANE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_PROPANE);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_PROPANE);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_INFECTED);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_SAWEDOFF);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_FAMAS);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_FAMAS);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_FAMAS);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_IDLE_FAMAS);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_FAMAS);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_FAMAS);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_FAMAS);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_FAMAS);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_FAMAS);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_FAMAS);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_REVOLVER);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_REVOLVER);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_REVOLVER);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_IDLE_REVOLVER);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_REVOLVER);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_REVOLVER);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_REVOLVER);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_REVOLVER);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_REVOLVER);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_REVOLVER);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_BASH_REVOLVER);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_AKIMBO);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_RUN_AKIMBO);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_AKIMBO);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_IDLE_AKIMBO);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_IDLE_CROUCH_AKIMBO);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_WALK_CROUCH_AKIMBO);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RANGE_ATTACK_AKIMBO);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_RELOAD_AKIMBO);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_JUMP_AKIMBO);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_SLIDE_AKIMBO);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_GESTURE_BASH_AKIMBO);

	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_MENU01);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_MENU02);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_MENU03);
	REGISTER_SHARED_ACTIVITY(ACT_HL2MP_MENU04);

	// BB2 Custom NPC acts.
	REGISTER_SHARED_ACTIVITY(ACT_IDLE_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_WALK_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_CROUCH_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_COVER_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_WALK_CROUCH_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_GESTURE_RANGE_ATTACK_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_RANGE_ATTACK_MINIGUN);
	REGISTER_SHARED_ACTIVITY(ACT_MONK_GUN_IDLE);

	// Multiplayer
	REGISTER_SHARED_ACTIVITY(ACT_MP_STAND_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_CROUCH_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_CROUCH_DEPLOYED_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_CROUCH_DEPLOYED);
	REGISTER_SHARED_ACTIVITY(ACT_MP_CROUCHWALK_DEPLOYED);
	REGISTER_SHARED_ACTIVITY(ACT_MP_DEPLOYED_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_RUN);
	REGISTER_SHARED_ACTIVITY(ACT_MP_WALK);
	REGISTER_SHARED_ACTIVITY(ACT_MP_SLIDE_IDLE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_AIRWALK);
	REGISTER_SHARED_ACTIVITY(ACT_MP_CROUCHWALK);
	REGISTER_SHARED_ACTIVITY(ACT_MP_SPRINT);
	REGISTER_SHARED_ACTIVITY(ACT_MP_JUMP);
	REGISTER_SHARED_ACTIVITY(ACT_MP_JUMP_START);
	REGISTER_SHARED_ACTIVITY(ACT_MP_JUMP_FLOAT);
	REGISTER_SHARED_ACTIVITY(ACT_MP_JUMP_LAND);
	REGISTER_SHARED_ACTIVITY(ACT_MP_DOUBLEJUMP);
	REGISTER_SHARED_ACTIVITY(ACT_MP_SWIM);
	REGISTER_SHARED_ACTIVITY(ACT_MP_DEPLOYED);
	REGISTER_SHARED_ACTIVITY(ACT_MP_SWIM_DEPLOYED);
	REGISTER_SHARED_ACTIVITY(ACT_MP_BASH);
	REGISTER_SHARED_ACTIVITY(ACT_MP_SLIDE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_INFECTED);
	REGISTER_SHARED_ACTIVITY(ACT_MP_KICK);

	REGISTER_SHARED_ACTIVITY(ACT_MP_ATTACK_STAND_PRIMARYFIRE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_ATTACK_STAND_PRIMARYFIRE_DEPLOYED);
	REGISTER_SHARED_ACTIVITY(ACT_MP_ATTACK_STAND_SECONDARYFIRE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_ATTACK_STAND_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_ATTACK_CROUCH_PRIMARYFIRE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_ATTACK_CROUCH_PRIMARYFIRE_DEPLOYED);
	REGISTER_SHARED_ACTIVITY(ACT_MP_ATTACK_CROUCH_SECONDARYFIRE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_ATTACK_CROUCH_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_ATTACK_SWIM_PRIMARYFIRE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_ATTACK_SWIM_SECONDARYFIRE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_ATTACK_SWIM_GRENADE);
	REGISTER_SHARED_ACTIVITY(ACT_MP_RELOAD_STAND);
	REGISTER_SHARED_ACTIVITY(ACT_MP_RELOAD_STAND_LOOP);
	REGISTER_SHARED_ACTIVITY(ACT_MP_RELOAD_STAND_END);
	REGISTER_SHARED_ACTIVITY(ACT_MP_RELOAD_CROUCH);
	REGISTER_SHARED_ACTIVITY(ACT_MP_RELOAD_CROUCH_LOOP);
	REGISTER_SHARED_ACTIVITY(ACT_MP_RELOAD_CROUCH_END);
	REGISTER_SHARED_ACTIVITY(ACT_MP_RELOAD_SWIM);
	REGISTER_SHARED_ACTIVITY(ACT_MP_RELOAD_SWIM_LOOP);
	REGISTER_SHARED_ACTIVITY(ACT_MP_RELOAD_SWIM_END);

	// Flinches
	REGISTER_SHARED_ACTIVITY(ACT_MP_GESTURE_FLINCH);
	REGISTER_SHARED_ACTIVITY(ACT_MP_GESTURE_FLINCH_HEAD);
	REGISTER_SHARED_ACTIVITY(ACT_MP_GESTURE_FLINCH_CHEST);
	REGISTER_SHARED_ACTIVITY(ACT_MP_GESTURE_FLINCH_STOMACH);
	REGISTER_SHARED_ACTIVITY(ACT_MP_GESTURE_FLINCH_LEFTARM);
	REGISTER_SHARED_ACTIVITY(ACT_MP_GESTURE_FLINCH_RIGHTARM);
	REGISTER_SHARED_ACTIVITY(ACT_MP_GESTURE_FLINCH_LEFTLEG);
	REGISTER_SHARED_ACTIVITY(ACT_MP_GESTURE_FLINCH_RIGHTLEG);

	AssertMsg( g_HighestActivity == LAST_SHARED_ACTIVITY - 1, "Not all activities from ai_activity.h registered in activitylist.cpp" ); 
} 

int ActivityList_HighestIndex()
{
	return g_HighestActivity;
}
